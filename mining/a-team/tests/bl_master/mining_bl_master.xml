<root>
    <tracereader name="mangroveTraceReader">
        <vcdParserConfig>
            <clockSignal name="wb_clk"/>
            <splitSignals value="No"/>
            <addModulePathToVariables value="No"/>
            <convertSingleBitLogicToBool value="Yes"/>
        </vcdParserConfig>
    </tracereader>
    <!--
    Use only the following Boolean variables: wb_err wb_rst wb_stall wb_stb wb_we wb_ack wb_cyc busy write error_from_bus ready_from_bus request reset  
    -->
    <coneminer name="manualDefinition">
        <coneOfInfluence name="cone1">
            <atomicPropositions>
                <atomicProposition formula="busy && !write" dir="inout"/>
		    <!--
		      Add propositions here
		    -->
            </atomicPropositions>
        </coneOfInfluence>
    </coneminer>

    <!-- 
        The full template is "(antecedent -> consequent)"
        The antecedent is generated automatically following the template: p_1 && p_2 ... p_n

        The templates must be written in the spot ltl language.
        Some notes for the spot ltl language:
        - Use "<->" instead of "=="
        - Use "X[constant] expression" intead of "nexttime[constant] expression"
        - Use "expression1 U expression2" intead of "expression1 until expression2"
        - Use "expression1 -> expression2" intead of "expression1 |-> expression2"
        - The other operators should hold the usual syntax
    -->
    <propositionminer name="TBMiner">
        <ConsequentTemplates>
                    <template value="Xp2"/>
		    <!--
		      Add templates here
		    -->
         </ConsequentTemplates>
    </propositionminer>

    <propertyminer name="A-teamMiner">
         <constraints maxVariables="10"/>
    </propertyminer>

    <propertyprinter name="sva">
        <generateChecker value="No" name="buslayer_master"/>
    </propertyprinter>

</root>
